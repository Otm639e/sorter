{"version":3,"sources":["sortingAlgorithms.js","index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","sort","newArr","arr","slice","lines","document","getElementsByClassName","i","length","style","height","order","endAnimation","sortedArray","doSort","a","backgroundColor","milisecond","miliseconds","newArray","wrap","getElementById","lineCopies","push","currentSmallest","index","size","insertBefore","splice","originalIndexToIndexNow","bar","j","clone","indexClone","numArray","line","mergeSortHelper","positionsArr","mid","Math","floor","left","right","merge","arr1","arr2","result","counter","firstHalf","secondHalf","firstHalfOfElements","secondHalfOfElements","lineOne","lineTwo","x","dragContainer","transimg","createElement","dragstarting","event","dataTransfer","setData","setDragImage","this","addEventListener","dragable","percent","pageX","offsetWidth","dragending","touchstarting","touchable","touches","clientX","touchending","id","window","onload","elipse","appendChild","Bar","props","className","value","Body","state","bars","deletedSorts","resetArray","deleteExtraSorts","selectionSort","setArray","insertionSort","mergeSort","getComputedStyle","parseInt","start","end","numOfBars","random","setState","popUp","currentSort","getElementsByTagName","removeChild","del1","del2","onClick","type","defaultValue","min","max","goLeft","selection","insertion","goRight","map","draggable","dragconstraint","React","Component","Sort","ReactDOM","render"],"mappings":"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","file":"static/js/main.33605c1a.chunk.js","sourcesContent":["\n/**https://www.sitepoint.com/delay-sleep-pause-wait/ */\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction sort(newArr) {\n  let arr = newArr.slice();\n  let lines = document.getElementsByClassName('bar');\n  for (let i = 0; i < lines.length; i++) {\n      lines[i].style.height = `${arr[i]}px`;\n      lines[i].style.order = '-1';\n  }\n  \n}\nasync function endAnimation(sortedArray, doSort) {\n  let lines = document.getElementsByClassName('bar');\n  for (let i = 0; i < lines.length; i++) {\n      lines[i].style.backgroundColor = '#82D2EE';\n  }\n  await sleep(1000);\n  for (let i = 0; i < lines.length; i++) {\n      lines[i].style.backgroundColor = '#283054';\n  }\n  if (doSort) {\n      sort(sortedArray);\n  }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////               ALGORITHMS FOR SORTING AND ANIMATIONS WITH IN THE METHODS               /////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nlet milisecond = 1500;\n\n/**\n* \n* @param {*Array with heights of bars} arr \n* This is the selectionSort Algorithm\n* Uses inserBefore method in order to sort\n*/\nexport async function selectionSort(arr){\n  let miliseconds = milisecond;\n  let newArray = arr.slice();\n  let sortedArray = [];\n  let lines = document.getElementsByClassName('bar');\n  let wrap = document.getElementById('myBody'); \n  let lineCopies = [];\n  for (let i = 0; i < lines.length; i++) {\n      lineCopies.push(lines[i]);\n  }\n  let currentSmallest = null;\n  while (lineCopies.length > 0) {\n      miliseconds = milisecond;\n      let index = 0;\n      let size = 401;\n      for(let i = 0; i < lineCopies.length; i++) {\n          if (i > 0 && (i-1) !== index) {\n              lineCopies[i-1].style.backgroundColor = \"#283054\";\n          }\n          miliseconds = milisecond;\n          lineCopies[i].style.backgroundColor = \"#8ED1C0\";\n          await sleep(miliseconds);\n          if (newArray[i] < size) {\n              if (currentSmallest != null) {\n                  currentSmallest.style.backgroundColor = \"#283054\";\n              }\n              currentSmallest = lineCopies[i];\n              size = newArray[i];\n              currentSmallest.style.backgroundColor = \"#DE9B59\";\n              await sleep(miliseconds);\n              index = i;\n          }\n      }\n      lineCopies[lineCopies.length - 1].style.backgroundColor = \"#283054\";\n      currentSmallest.style.backgroundColor = '#D186A4';\n      await sleep(miliseconds);\n      wrap.insertBefore(currentSmallest, lines[lines.length]);\n      await sleep(miliseconds);\n      sortedArray.push(newArray[index]);\n      newArray.splice(index, 1);\n      lineCopies.splice(index, 1);\n      currentSmallest = null;\n  }\n  endAnimation(sortedArray, false);\n}\n/**\n* \n* @param {*Array with heights of bars} arr \n* \n* New method will be to set a order to each item according to their index \n* and then switch them when needed. The new list being created will be\n* in front of the whole list.\n* \n* Done using style.order to experiment with this method\n*/\nexport async function insertionSort(arr) {\n  let miliseconds = milisecond;\n  let newArray = arr.slice();\n  let sortedArray = [];\n  let lines = document.getElementsByClassName('bar');\n  let originalIndexToIndexNow = [];\n  /** How to get style of an element\n   * let style1 = window.getComputedStyle(lines[0]);\n   * let style2 = window.getComputedStyle(lines[1]);\n   * style1.order == `0`\n   * https://attacomsian.com/blog/javascript-get-css-styles\n   */\n  for (let bar = 0; bar < newArray.length; bar++) {\n      miliseconds = milisecond;\n      lines[bar].style.backgroundColor = '#8ED1C0';\n      await sleep(miliseconds);\n      lines[bar].style.order = `${bar}`;\n      originalIndexToIndexNow.push(bar);\n      sortedArray.push(newArray[bar]);\n      if (bar > 0) {\n          if (sortedArray[bar] < sortedArray[bar - 1]) {\n              for (let j = sortedArray.length - 1; j >= 0; j--) {\n                  if (sortedArray[j] < sortedArray[j-1]) {\n                      //lines[bar].style.backgroundColor = '#999999';\n                      let clone = sortedArray[j];\n                      sortedArray[j] = sortedArray[j-1];\n                      sortedArray[j-1] = clone;\n                      let indexClone = originalIndexToIndexNow[j];\n                      miliseconds = milisecond;\n                      await sleep(miliseconds);\n                      lines[originalIndexToIndexNow[j]].style.order = `${j-1}`;\n                      lines[originalIndexToIndexNow[j-1]].style.order = `${j}`;\n                      originalIndexToIndexNow[j] = originalIndexToIndexNow[j-1];\n                      originalIndexToIndexNow[j-1] = indexClone;\n                  } else {\n                      break;\n                  }\n              }\n          }\n      }\n      await sleep(miliseconds);\n      lines[bar].style.backgroundColor = '#D186A4';\n      await sleep(miliseconds);\n  }\n  endAnimation(sortedArray, true);\n}\n\n\n\n\n/**\n* \n* @param {*Array with heights of bars} arr \n* \n* The Algorithm for MergeSort \n* \n* Uses mergeSortHelper in order to use recursion from merge\n* \n* Done using insertBefore since style.order was taking too long to make it work\n* and insertBefore was much easier to think about recursively\n*/\nlet lines = null;\nlet wrap = null;\n\nexport async function mergeSort(arr) {\n  lines = document.getElementsByClassName('bar');\n  wrap = document.getElementById('myBody'); \n  let numArray = [];\n  for (let line = 0; line < lines.length; line++) {\n      numArray[line] = line;\n  }\n  let sortedArray = await mergeSortHelper(arr, numArray);\n  endAnimation(sortedArray, false);\n  return sortedArray;\n}\n\nasync function mergeSortHelper(arr, positionsArr) {\n  if (arr.length <= 1) {\n      return arr;\n  }\n  let mid = Math.floor(arr.length/2);\n  let left = await mergeSortHelper(arr.slice(0, mid), positionsArr.slice(0, mid));\n  let right = await mergeSortHelper(arr.slice(mid), positionsArr.slice(mid));\n  return await merge(left, right, positionsArr);\n}\n\nasync function merge(arr1, arr2, positionsArr) {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let counter = 0;\n  let mid = Math.floor(positionsArr.length/2);\n  let firstHalf = positionsArr.slice(0, mid);\n  let secondHalf = positionsArr.slice(mid);\n  let miliseconds = milisecond;\n  let firstHalfOfElements = [];\n  let secondHalfOfElements = [];\n  for (let i = 0; i < firstHalf.length; i++) {\n      firstHalfOfElements.push(lines[firstHalf[i]]);\n  }\n  for (let i = 0; i < secondHalf.length; i++) {\n      secondHalfOfElements.push(lines[secondHalf[i]]);\n  }\n  //Once either i or j reached arr1.length or arr2.length it finishes!!\n  while (i < arr1.length && j < arr2.length) {\n      miliseconds = milisecond;\n      if (arr1[i] < arr2[j]) {\n          let lineOne = firstHalfOfElements[i];\n          lineOne.style.backgroundColor = '#DE9B59';\n          let lineTwo = secondHalfOfElements[j];\n          lineTwo.style.backgroundColor = '#8ED1C0';\n          await sleep(miliseconds);\n          wrap.insertBefore(lineOne, lines[positionsArr[counter]]);\n          await sleep(miliseconds);\n          lineTwo.style.backgroundColor = '#283054';\n          lineOne.style.backgroundColor = '#283054';\n          await sleep(miliseconds);\n          result.push(arr1[i]);\n          i++;\n      } else {\n          let lineOne = firstHalfOfElements[i];\n          lineOne.style.backgroundColor = '#DE9B59';\n          let lineTwo = secondHalfOfElements[j];\n          lineTwo.style.backgroundColor = '#8ED1C0';\n          await sleep(miliseconds);\n          wrap.insertBefore(lineTwo, lines[positionsArr[counter]]);\n          await sleep(miliseconds);\n          lineTwo.style.backgroundColor = '#283054';\n          lineOne.style.backgroundColor = '#283054';\n          await sleep(miliseconds);\n          result.push(arr2[j]);\n          j++;\n      }\n      counter ++;\n  }\n  //These while loops should take car of filling result \n  while (i < arr1.length) {\n      result.push(arr1[i]);\n      i++;\n      counter ++;\n  }\n  while (j < arr2.length) {\n      result.push(arr2[j]);\n      j++;\n      counter ++;\n  }\n  return result;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////               ANIMATIONS FOR SPEED TOGGLE               ///////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n* This section will be incharge of animations for speed toggle\n*/\nlet x = 0;\nlet dragContainer = null;\nlet transimg = document.createElement('canvas');\ntransimg.id = \"invisible\";\n\nwindow.onload=function(){\n  dragContainer = document.getElementById(\"container\");\n  let elipse = document.getElementById(\"elipse\");\n  elipse.appendChild(transimg);\n  elipse.addEventListener('dragstart', dragstarting);\n  elipse.addEventListener('touchstart', touchstarting);\n}\n\nfunction dragstarting(event) {\n  event.dataTransfer.setData('Test', 'some data');\n  event.dataTransfer.setDragImage(transimg, 0, 0);\n  this.addEventListener('drag', dragable);\n}\nfunction dragable(event) {\n  x = event.pageX;\n  let percent = 100;\n  if (x <= (dragContainer.offsetWidth - 13) && x >= 13) {\n      percent = ((dragContainer.offsetWidth - (dragContainer.offsetWidth - (x-13))) / dragContainer.offsetWidth) * 100;\n      this.style.left = `${percent}%`;\n  }\n  this.addEventListener('dragend', dragending);\n}\nfunction dragending(event) {\n  x = event.pageX;\n  let percent = 0;\n  if (x <= (dragContainer.offsetWidth - 13) && x >= 13) {\n      percent = ((dragContainer.offsetWidth - (dragContainer.offsetWidth - (x-13))) / dragContainer.offsetWidth) * 100;\n      this.style.left = `${percent}%`;\n  } else if(x > dragContainer.offsetWidth - 13) {\n      percent = 100;\n  }\n  milisecond = 1000 - (1000 * (percent/100));\n  // console.log(\"percent: \"+percent);\n  // console.log(\"percent / 100: \" + percent/100);\n  // console.log(500 * (percent/100));\n  // console.log(milisecond);\n}\n\n/**\n* \n*  For Use of phones \n*/\n\nfunction touchstarting(event) {\n  this.addEventListener('touchmove', touchable);\n}\nfunction touchable(event) {\n  x = event.touches[0].clientX;\n  let percent = 100;\n  if (x <= (dragContainer.offsetWidth - 13) && x >= 13) {\n      percent = ((dragContainer.offsetWidth - (dragContainer.offsetWidth - (x-13))) / dragContainer.offsetWidth) * 100;\n      this.style.left = `${percent}%`;\n  }\n  this.addEventListener('touchend', touchending);\n}\nfunction touchending(event) {\n  //x = event.touches[0].clientX;\n  let percent = 0;\n  if (x <= (dragContainer.offsetWidth - 13) && x >= 13) {\n      percent = ((dragContainer.offsetWidth - (dragContainer.offsetWidth - (x-13))) / dragContainer.offsetWidth) * 100;\n      this.style.left = `${percent}%`;\n  } else if(x > dragContainer.offsetWidth - 13) {\n      percent = 100;\n  }\n  milisecond = 1000 - (1000 * (percent/100));\n}\n\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {selectionSort} from './sortingAlgorithms'\nimport {insertionSort} from './sortingAlgorithms'\nimport {mergeSort} from './sortingAlgorithms'\n\nfunction randomNumber(start, end) {\n  let randomNumber = Math.floor(Math.random() * (end - start + 1)) + start;\n  return randomNumber;\n}\n\nfunction Bar(props) {\n  return <div className = \"bar\" style={{ height: `${props.value}px` }} >  </div>\n}\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bars: [],\n      deletedSorts: []\n    };\n  }\n  componentDidMount(){\n    this.resetArray();\n    this.deleteExtraSorts();\n  }\n  \n  //Animations for SelectionSort\n  selection(){\n    let arr = this.setArray();\n    selectionSort(arr);\n  }\n  //Animations for InsertionSort\n  insertion(){\n    let arr = this.setArray();\n    insertionSort(arr);\n  }\n  //Animations for MergeSort\n  merge(){\n    let arr = this.setArray();\n    mergeSort(arr);\n  }\n\n\n  setArray() {\n    let lines = document.getElementsByClassName('bar');\n    let arr = [];\n    for (let i = 0; i < lines.length; i++) {\n      let style = window.getComputedStyle(lines[i]);\n      arr.push(parseInt(style.height));\n    }\n    return arr;\n  }\n  \n\n  resetArray() {\n    let lines = document.getElementsByClassName('bar');\n    for (let i = 0; i < lines.length; i++) {\n      lines[i].style.order = -1;\n      lines[i].style.backgroundColor = '#283054';\n    }\n    let bars = [];\n    let numOfBars = document.getElementById(\"numOfBars\");\n    for (let i = 0; i < numOfBars.value; i++) {\n      bars.push(randomNumber(45, 400));\n    }\n    this.setState({bars: bars});\n  }\n\n  goRight() {\n    let popUp = document.getElementById('switch');\n    let currentSort = popUp.getElementsByTagName('h3')[1];\n\n    popUp.insertBefore(this.state.deletedSorts[0], currentSort);\n    popUp.removeChild(currentSort);\n    this.setState({deletedSorts: [this.state.deletedSorts[1], currentSort]});\n  }\n  goLeft() {\n    let popUp = document.getElementById('switch');\n    let currentSort = popUp.getElementsByTagName('h3')[1];\n\n    popUp.insertBefore(this.state.deletedSorts[1], currentSort);\n    popUp.removeChild(currentSort);\n    this.setState({deletedSorts: [currentSort, this.state.deletedSorts[0]]});\n  }\n\n  deleteExtraSorts() {\n    let popUp = document.getElementById('switch');\n    let del1 = popUp.getElementsByTagName('h3')[2];\n    let del2 = popUp.getElementsByTagName('h3')[3];\n    popUp.removeChild(del1);\n    popUp.removeChild(del2);\n    this.setState({deletedSorts: [del1, del2]});\n  }\n\n  /**\n   * https://unicode-table.com/en/1405/\n   * This is where I got the arrows\n   */\n  render() {\n    let {bars} = this.state;\n    return (\n      <div className = \"wrapper\">\n        <div className = \"header\">\n          <h1>Sorterer</h1>\n          <div id = 'reset'>\n            <h3 onClick = {() => this.resetArray()}>Reset Array</h3>\n            <input id = \"numOfBars\" type = \"number\" defaultValue = \"32\" min = \"2\" max = \"200\"/>\n          </div>\n          <div id = \"switch\">\n            <h3 onClick = {() => this.goLeft()}> ᐊ </h3>\n            <h3 onClick = {() => this.selection()}>Selection Sort</h3>\n            <h3 onClick = {() => this.insertion()}>Insertion Sort</h3>\n            <h3 onClick = {() => this.merge()}>Merge Sort</h3>\n            <h3 onClick = {() => this.goRight()}> ᐅ </h3>\n          </div>\n        </div>\n        <div id = \"myBody\">\n          {bars.map( (value, index) => (<Bar value = {value} key = {index}/>))}\n        </div>\n        <div className = \"footer\">\n          <h2 className = \"speedescription\"> Drag and Release to increase speed </h2>\n          <div id = \"container\"> <div id = \"elipse\" draggable = \"true\" dragconstraint = \"horizontal\"></div> </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Sort extends React.Component {\n  render() {\n    return (\n      <div>\n        <Body/>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Sort />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}